/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.saber3d.task;

import com.saber3d.task.commons.ExampleItem;
import com.saber3d.task.task1.publisher.ExamplePublisher;
import com.saber3d.task.task1.subscriber.ExampleSubscriber;
import com.saber3d.task.task2.subscriber.SecondTaskSubscriber;
import reactor.core.publisher.Flux;
import reactor.core.scheduler.Schedulers;

import java.util.List;

public class App {

    public static void main(String[] args) {

        // Maybe I misunderstood the problem
        // Please check my javadocs in task1 package for understanding my logic

        showFirstTask();
        //showSecondTask();

    }

    public static void showFirstTask(){

        ExamplePublisher<ExampleItem> publisher = new ExamplePublisher<>();
        ExampleSubscriber<ExampleItem> subscriber1 = new ExampleSubscriber<>(1);
        ExampleSubscriber<ExampleItem> subscriber2 = new ExampleSubscriber<>(2);

        publisher.subscribe(subscriber1);
        publisher.subscribe(subscriber2);

        List<ExampleItem> list = List.of(
                new ExampleItem("Andy"),
                new ExampleItem("Dima"),
                new ExampleItem("Petr")
        );

        for (ExampleItem item : list){

            try{
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            publisher.submit(item);

        }

        ExampleSubscriber<ExampleItem> subscriber3 = new ExampleSubscriber<>(3);
        publisher.subscribe(subscriber3);

    }

    public static void showSecondTask(){

        SecondTaskSubscriber<ExampleItem> subscriber1 = new SecondTaskSubscriber<>();
        SecondTaskSubscriber<ExampleItem> subscriber2 = new SecondTaskSubscriber<>();
        SecondTaskSubscriber<ExampleItem> subscriber3 = new SecondTaskSubscriber<>();

        Flux<ExampleItem> flux = Flux.just(
                new ExampleItem("Andy", 1),
                new ExampleItem("Dima", 2),
                new ExampleItem("Petr", 3)
        );

        // A little understanding what I'm doing
        // I hoped this code create a new thread for each subscriber
        // But it's not
        flux.subscribeOn(Schedulers.newParallel("1")).subscribe(subscriber1);
        flux.subscribeOn(Schedulers.newParallel("2")).subscribe(subscriber1);
        flux.subscribeOn(Schedulers.newParallel("3")).subscribe(subscriber1);

    }
}
